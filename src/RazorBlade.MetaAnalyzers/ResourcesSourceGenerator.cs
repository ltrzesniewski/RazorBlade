using System;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Xml.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Diagnostics;
using RazorBlade.Analyzers.Support;
using RazorBlade.MetaAnalyzers.Support;

namespace RazorBlade.MetaAnalyzers;

[Generator]
public class ResourcesSourceGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var inputFiles = context.AdditionalTextsProvider
                                .Where(static i => i.Path.EndsWith(".resx", StringComparison.OrdinalIgnoreCase))
                                .Combine(context.AnalyzerConfigOptionsProvider)
                                .Select(static (pair, _) => GetInputFile(pair.Left, pair.Right))
                                .WhereNotNull();

        context.RegisterSourceOutput(inputFiles, Generate);
    }

    private static InputFile? GetInputFile(AdditionalText additionalText, AnalyzerConfigOptionsProvider analyzerConfigOptions)
    {
        var options = analyzerConfigOptions.GetOptions(additionalText);

        if (!options.TryGetValue("build_metadata.AdditionalFiles.Role", out var role) || !string.Equals(role, "Resource", StringComparison.OrdinalIgnoreCase))
            return null;

        if (!options.TryGetValue("build_metadata.AdditionalFiles.Namespace", out var ns))
            return null;

        return new InputFile(additionalText, ns);
    }

    private static void Generate(SourceProductionContext context, InputFile inputFile)
    {
        var inputText = inputFile.AdditionalText.GetText(context.CancellationToken);
        if (inputText is null)
            return;

        var writer = new SourceWriter();
        var className = Path.GetFileNameWithoutExtension(inputFile.AdditionalText.Path);

        writer.WriteLine("// <auto-generated />");
        writer.WriteLine();
        writer.WriteLine("using System.Globalization;");
        writer.WriteLine();
        writer.WriteLine($"namespace {inputFile.Namespace};");
        writer.WriteLine();

        var items = XDocument.Load(new StringReader(inputText.ToString())).Descendants("data");

        writer.Write("internal static class ");
        writer.WriteLine(className);

        using (writer.BlockScope())
        {
            foreach (var item in items)
            {
                var name = item.Attribute("name")?.Value ?? string.Empty;
                var value = item.Element("value")?.Value ?? string.Empty;

                if (string.IsNullOrEmpty(name))
                    continue;

                var formatStringName = SyntaxFacts.IsIdentifierStartCharacter(name[0]) ? name : $"_{name}";

                writer.WriteLine($"internal static string {formatStringName}");
                writer.WriteIndent();
                writer.Write("=> ");
                writer.WriteVerbatimString(value);
                writer.WriteLine(";");
                writer.WriteLine();

                var maxParam = -1;
                foreach (Match match in Regex.Matches(value, @"\{(?<nb>[0-9]+)\}"))
                    maxParam = Math.Max(maxParam, int.Parse(match.Groups["nb"].Value));

                if (maxParam >= 0)
                {
                    var argsSb = new StringBuilder();
                    var paramsSb = new StringBuilder();

                    for (var p = 0; p <= maxParam; ++p)
                    {
                        argsSb.Append("object p").Append(p);
                        paramsSb.Append("p").Append(p);

                        if (p < maxParam)
                        {
                            argsSb.Append(", ");
                            paramsSb.Append(", ");
                        }
                    }

                    writer.WriteLine($"internal static string Format{name}({argsSb})");
                    writer.WriteIndent();
                    writer.WriteLine($"=> string.Format(CultureInfo.InvariantCulture, {formatStringName}, {paramsSb});");
                    writer.WriteLine();
                }
            }
        }

        context.AddSource($"{className}.g.cs", writer.ToString());
    }

    private record InputFile(AdditionalText AdditionalText, string Namespace);
}
